# version: 2
# jobs:
#  build:
#    docker:
#      - image: circleci/node:8
#    steps:
#      - checkout
#      - setup_remote_docker
#      - run:
#          name: Setup common environment variables
#          command: |
#            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
#            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
#      - run:
#          name: Build image
#          command: |
#            docker build -t my-react-app .
#      - run:
#          name: Test image
#          command: |
#            docker run -d -p 8080:8080 --name built-image my-react-app
#            sleep 10
#      - run:
#          name: Save image to an archive
#          command: |
#            mkdir docker-image
#            docker save -o docker-image/image.tar my-react-app
#      - persist_to_workspace:
#          root: .
#          paths:
#            - docker-image
           
#  deploy:
#    docker:
#      - image: circleci/python:3.6.1
#    environment:
#      AWS_DEFAULT_OUTPUT: json
#    steps:
#      - checkout
#      - setup_remote_docker
#      - attach_workspace:
#          at: workspace
#      - restore_cache:
#          key: v1-{{ checksum "requirements.txt" }}
#      - run:
#          name: Install awscli
#          command: |
#            python3 -m venv venv
#            . venv/bin/activate
#            pip install -r requirements.txt
#      - save_cache:
#          key: v1-{{ checksum "requirements.txt" }}
#          paths:
#            - "venv"
#      - run:
#          name: Load image
#          command: |
#            docker load --input workspace/docker-image/image.tar
#      - run:
#          name: Setup common environment variables
#          command: |
#            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
#            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-cluster"' >> $BASH_ENV
#            echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"' >> $BASH_ENV
#      - run:
#          name: Push image
#          command: |
#            . venv/bin/activate
#            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
#            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$CIRCLE_SHA1
#      # - run:
#      #     name: Deploy
#      #     command: |
#      #       . venv/bin/activate
#      #       export ECS_TASK_FAMILY_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"
#      #       export ECS_CONTAINER_DEFINITION_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"
#      #       export EXECUTION_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/${AWS_RESOURCE_NAME_PREFIX}-ecs-execution-role"
#      #       ./deploy.sh
#      # - run:
#      #     name: Test deployment (Please manually tear down AWS resources after use, if desired)
#      #     command: |
#      #       . venv/bin/activate
#      #       TARGET_GROUP_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME | jq -r '.services[0].loadBalancers[0].targetGroupArn')
#      #       ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
#      #       ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
#      #       curl http://$ELB_DNS_NAME | grep "Hello World!"


version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Setup Dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
  image-creation:
    docker:
      - image: circleci/node:8
    steps:
      - run:
          name: building docker image
          command: docker build --rm=false -t gcr.io/${PROJECT}/${DOCKER_IMAGE}:$CIRCLE_SHA1 .
      - run:
          name: Mkdir docker-cache
          command: mkdir -p docker-cache
      - run:
          name: Save docker image to cache directory
          command: docker save -o docker-cache/built-image.tar asia.gcr.io/${PROJECT}/${DOCKER_IMAGE}:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - docker-cache
      - save_cache:
          key: node-modules-{{ checksum "package.json" }}
          paths:
            - node_modules

  deploy:
    working_directory: ~/my-react-app
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Load docker image from cache
          command: docker load --input docker-cache/built-image.tar
      - run:
          name: Auth gCloud SDK
          command: bash ./deploy/gcloud-auth.sh
      - run: 
          name: tag docker image with latest
          command: docker tag gcr.io/${PROJECT}/${DOCKER_IMAGE}:$CIRCLE_SHA1 gcr.io/${PROJECT}/${DOCKER_IMAGE}:latest
      - run:
          name: Running staging.sh
          command: bash ./deploy/staging.sh              
workflows:
  version: 2
  build-deploy: 
    jobs:
      - build
      - image-creation:
          requires:
            - build
      - deploy:
          requires:
            - image-creation
          filters:
            branches:
              only: master